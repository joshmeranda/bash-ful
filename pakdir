#!/bin/bash
program_name="$(basename $0)"

usage()
{
echo "Usage: $program_name [options] SOURCE [zip_file]"
echo "     --help                  diaplay this help text."
echo "  -d --dest                  the destination for the created zip file."
echo "     --ignore-file=[FILE]    use a specific pakignore file."
echo "  -g --git                   use the .gitignore file stored in the target directory".
echo
echo "  If no zipfile is specified, the zip created will be nammed after SOURCE"
echo "  followed by '_pak.zip'."
exit 0
}

echo_err()
{
    echo "$program_name: $1" 1>&2

    if [ -z "$2" ]; then exit "$2"; else exit 1; fi
}

parse_ignore()
{
    local target_pakignore="${target_dir}/${pakignore}"
    local ignore_count=1

    ignore_files[0]="$target_packignore"

    if [ ! -f $target_pakignore ]; then echo_err "No pakignore file found" 2; fi

    while read -r line; do
        line="$(echo $line | cut -d '#' -f 1)"

        if [ -z "$line" ]; then continue; fi

        ignore_files["$ignore_count"]="$line"
        ((ignore_count++))

    done < "$target_pakignore"
}

ignore()
{
    for file in "${ignore_files[@]}" ; do
        if [ "$file" == "$1" ]; then return 0; fi
    done

    return 1
}

filter_targets()
{
    for file in "${target_files[@]}"; do
        local raw_file="$file" # preseve the original file for later removal
        file=$(echo "$file" | sed "s/$target_dir\///")
        ignore "$file"
        local ignore_file="$?"
        if [ "$ignore_file" -eq 0 ]; then
            target_files=("${target_files[@]/$raw_file}")
        fi
    done
}

# parse options and arguments
opts=$(getopt -qo "d:g" --long "help,dest,ignore-file,git": -- "$@")
eval set -- "$opts"

if [ "$#" -eq 1 ]; then
    usage
fi

while :; do
    case "$1" in
        --help) usage
            ;;
        -d | --dest) dest="$2"
            shift
            ;;
        --ignore-file) pakignore="$1"
            shift
            ;;
        -g | --git) pakignore=".gitignore"
            ;;
        --) shift
            break
            ;;
    esac
    shift
done

if [ ! -d "$1" ]; then echo_err "no such directory '$1'" 1; fi

# Define script variables
target_dir="$1"
target_files=($target_dir/*)

if [ -z "$dest" ]; then dest='./'; fi
if [ -z "$pakignore" ]; then pakignore=".pakignore"; fi
if [ -z "$2" ]; then
    zip_file="$(basename $target_dir)_pak.zip";
elif [[ "$2" =~ "^\./?$" ]]; then
    zip_file="$(basename $(pwd)_pak.zip)"
else
    zip_file="$2"
fi

ignore_files=[]
parse_ignore "$target_dir" "$pakignore"
filter_targets

zip -r "$zip_file" "${target_files[@]}"

if [ -z "$dest" ]; then mv "$zip_file" "$dest"; fi

# 0) Do what you want
# 1) Redistribute sofftware
# 2) Modify software
# 3) Redistribute the changed version of software
