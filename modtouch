#!/bin/bashs
# uses chmod and touch to create a file or files with specific permission

program_name="$(basename $0)"
  
usage()
{
echo "Usage: $program_name [OPTION]... OCTAL-MODE FILE..."
echo "  -o --overwrite             specify what can be overwritten from one of 'none',"
echo "                             'mode', 'content', 'all'. Defaults to 'none' if not"
echo "                             flagged."
echo "  -i --interactive[=WHEN]    prompt according to WHEN. If 'overwrite', prompt"
echo "                             only when overwriting the permissions or contents"
echo "                             of another file. Defaults to 'never' if not flagged."
}

invalid_argument()
{
    echo "$program_name: invalid argument '$1'2"
    echo "try: '$program_name --help' for more information"
    exit 1
}

validate_argument()
{
    arg="$1"
    shift
    for i in "$@"; do
        if [ "$arg" = "$i" ]; then
            return 0
        fi
    done

    invalid_argument "$arg"
}

# parse options and arguments
opts=$(getopt -o "i:o:" --long "help,interactive,overwrite": -- "$@")
eval set -- "$opts"

if [ "$#" -eq 1 ]; then
    usage
    exit 0
fi

interactive_args=("never" "overwrite" "always")
overwrite_args=("none" "mode" "content" "all")

while true; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        -i | --interactive)
            validate_argument "$2" "${interactive_args[@]}"
            interactive="$2"
            shift
            ;;
        -o | --overwrite)
            validate_argument "$2" "${overwrite_args[@]}"
            overwrite="$2"
            shift
            ;;
        --) shift
            mode="$1"
            shift
            target_files="$@"
            break
            ;;
    esac

    shift
done

overwrite_file()
{
    if [ -z "$interactive" ] || [ "$interactive" = "none" ]; then return 0; fi
    read -p "$program_name: $1" -n 1 modify
    echo
    if [[ "$modify" == [yY] ]]; then return 0; fi
    return 1
}

for file in $target_files; do
    file_touch=0
    file_mode=0

    if [ -f "$file" ] || [ -d "$file" ]; then

        echo "$file exists $overwrite"

        if [ -z "$overwrite" ] || [ "$overwrite" = "none" ]; then
            echo "$program_name: file '$file' already exists"
            continue;
        elif [ "$overwrite" = "mode" ]; then
            overwrite_file "Overwrite permissions for file '$file'? "
            file_mode="$?"
            file_touch=1;
        elif [ "$overwrite" = "content" ]; then
            overwrite_file "Overwrite the contents of file '$file' ? "
            file_touch="$?"
            file_mode=1;
        elif [ "$overwrite" = "all" ]; then
            overwrite_file "Overwrite file '$file' ? "
            file_mode="$?"
            file_touch="$file_mode"
        fi
    else
        if [ "$interactive" = "always" ]; then
            overwrite_file "Create file '$file' ? "
            file_touch="$?"
            file_mode="$file_touch"
        fi
    fi

    #empty the file if overwrite contents
    if [ "$file_touch" -eq 0 ] && [ "$file_mode" -eq 1 ]; then > "$file";
    elif [ "$file_touch" -eq 0 ]; then touch "$file"; fi

    if [ ! -z "$mode" ] && [ "$file_mode" -eq 0 ]; then chmod "$mode" "$file"; fi
done

exit "$?"